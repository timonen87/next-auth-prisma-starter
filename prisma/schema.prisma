// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  createdStories Store[] @relation("CreatedBy")

  password  String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
}

model Store {
  id           String        @id @default(uuid())
  name         String
  brands       Brand[]       @relation("StoreToBrand")
  productTypes ProductType[] @relation("StoreToType")
  products     Product[]     @relation("StoreToProduct")

  creatorId String
  creator   User     @relation("CreatedBy", fields: [creatorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id       String @id @default(uuid())
  storeId  String
  store    Store  @relation("StoreToBrand", fields: [storeId], references: [id])
  label    String
  imageUrl String

  productTypes ProductType[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([storeId])
}

model ProductType {
  id        String    @id @default(uuid())
  storeId   String
  store     Store     @relation("StoreToType", fields: [storeId], references: [id])
  brandId   String
  brand     Brand     @relation(fields: [brandId], references: [id])
  name      String
  products  Product[] @relation("ProductTypeToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
  @@index([brandId])
}

model Product {
  id            String      @id @default(uuid())
  storeId       String
  store         Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  productTypeId String
  productType   ProductType @relation("ProductTypeToProduct", fields: [productTypeId], references: [id])
  description   String?
  atributes     Json?
  name          String
  price         Decimal
  isFeatured    Boolean     @default(false)
  isArchived    Boolean     @default(false)

  images Image[] // Relation to Image model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([productTypeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
